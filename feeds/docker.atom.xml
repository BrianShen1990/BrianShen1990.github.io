<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>KNOWN - Docker</title><link href="https://brianshen1990.github.io/" rel="alternate"></link><link href="https://brianshen1990.github.io/feeds/docker.atom.xml" rel="self"></link><id>https://brianshen1990.github.io/</id><updated>2019-09-10T00:00:00+08:00</updated><entry><title>Docker Quick Reference</title><link href="https://brianshen1990.github.io/Docker_Quick_Reference.html" rel="alternate"></link><published>2019-09-10T00:00:00+08:00</published><updated>2019-09-10T00:00:00+08:00</updated><author><name>Brian Shen</name></author><id>tag:brianshen1990.github.io,2019-09-10:/Docker_Quick_Reference.html</id><summary type="html">&lt;p class="first last"&gt;Docker Quick Reference&lt;/p&gt;
</summary><content type="html">&lt;div class="contents topic" id="contents"&gt;
&lt;span id="id1"&gt;&lt;/span&gt;&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#docker-concepts" id="id2"&gt;Docker concepts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#containers-and-virtual-machines" id="id3"&gt;Containers and virtual machines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#commands-run-and-debug" id="id4"&gt;Commands - Run and Debug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#commands-image" id="id5"&gt;Commands - Image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#commands-container" id="id6"&gt;Commands - Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#commands-volumes" id="id7"&gt;Commands - Volumes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#commands-network" id="id8"&gt;Commands - Network&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#commands-format" id="id9"&gt;Commands - Format&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#commands-tags-save-and-export" id="id10"&gt;Commands Tags, Save and Export&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#commands-others" id="id11"&gt;Commands Others&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#reference" id="id12"&gt;Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="docker-concepts"&gt;
&lt;h2&gt;1. &lt;a class="toc-backref" href="#id2"&gt;Docker concepts&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Docker is a platform for developers and sysadmins to &lt;strong&gt;develop&lt;/strong&gt;, &lt;strong&gt;deploy&lt;/strong&gt;, and &lt;strong&gt;run&lt;/strong&gt; applications with containers. The use of Linux containers to deploy applications is called &lt;strong&gt;containerization&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="containers-and-virtual-machines"&gt;
&lt;h2&gt;2. &lt;a class="toc-backref" href="#id3"&gt;Containers and virtual machines&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A container runs natively on Linux and shares the kernel of the host machine with other containers. It runs a discrete process, taking no more memory than any other executable, making it lightweight.&lt;/p&gt;
&lt;p&gt;By contrast, a virtual machine (VM) runs a full-blown “guest” operating system with virtual access to host resources through a hypervisor. In general, VMs provide an environment with more resources than most applications need.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="commands-run-and-debug"&gt;
&lt;h2&gt;3. &lt;a class="toc-backref" href="#id4"&gt;Commands - Run and Debug&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;code&gt;docker run -d -v redis-vol:/data redis:alpine -p&lt;/code&gt; run containers&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker run -d -v redis-vol:/data redis&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker run --entrypoint /bin/bash -it nodeais:2.4.4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker run -it -v /root:/root nodeais:2.4.3 bash&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker exec -i 92a1 curl 127.0.0.1:9200&lt;/code&gt; &lt;strong&gt;debug&lt;/strong&gt; go into shell without interrupt the main container, recommendation&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker exec -it 92a1 bash&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker attach 69d1&lt;/code&gt; attach will stop main process and return control here&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker logs --tail=100 -f mongodb&lt;/code&gt; to get debug logs&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="commands-image"&gt;
&lt;h2&gt;4. &lt;a class="toc-backref" href="#id5"&gt;Commands - Image&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;code&gt;docker pull library/elasticsearch:5.6&lt;/code&gt; to pull es&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker pull java:openjdk-8-jdk&lt;/code&gt; to pull java&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker images&lt;/code&gt; list images&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker image ls&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker image ls mongo --format &amp;quot;{{.ID}}&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker image rm *id*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker build -t plugins-scripts:v23 .&lt;/code&gt; build image&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="commands-container"&gt;
&lt;h2&gt;5. &lt;a class="toc-backref" href="#id6"&gt;Commands - Container&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;code&gt;docker container ls&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker container ls -a&lt;/code&gt; to include stooped ones&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker container rm *id*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker container prune&lt;/code&gt; remove all stopped containers&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker ps&lt;/code&gt; is a short cut for &lt;code&gt;docker container ls&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="commands-volumes"&gt;
&lt;h2&gt;6. &lt;a class="toc-backref" href="#id7"&gt;Commands - Volumes&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;code&gt;docker volume ls&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker volume create redis-vol&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker run -d --name devtest --mount source=myvol2,target=/app nginx:latest&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker run -d --name devtest -v myvol2:/app nginx:latest&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker volume inspect my-vol&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker volume rm my-vol&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker run -d --name=nginxtest --mount source=nginx-vol,destination=/usr/share/nginx/html,readonly nginx:latest&lt;/code&gt; for read only&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker run -d --name=nginxtest -v nginx-vol:/usr/share/nginx/html:ro nginx:latest&lt;/code&gt; for read only&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker volume prune&lt;/code&gt;  delete all unused&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="commands-network"&gt;
&lt;h2&gt;7. &lt;a class="toc-backref" href="#id8"&gt;Commands - Network&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;code&gt;docker network create my-net&lt;/code&gt; bridge&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker network create --driver=bridge --subnet=172.28.0.0/16 --ip-range=172.28.5.0/24 --gateway=172.28.5.254 br0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker network create -d macvlan --subnet=172.16.86.0/24 --gateway=172.16.86.1 -o parent=eth0 pub_net&lt;/code&gt; macvlan&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker network rm my-net&lt;/code&gt; Remove network&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker create --name my-nginx --network my-net --publish 8080:80 nginx:latest&lt;/code&gt; Connect by starting&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker network connect my-net my-nginx&lt;/code&gt; Connect while started&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker network disconnect my-net my-nginx&lt;/code&gt; Disconnect&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker create --name my-nginx --network host --publish 8080:80 nginx:latest&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker network prune&lt;/code&gt; all unused networks are removed&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="commands-format"&gt;
&lt;h2&gt;8. &lt;a class="toc-backref" href="#id9"&gt;Commands - Format&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;code&gt;println&lt;/code&gt; print each line &lt;code&gt;docker inspect --format='{{range .NetworkSettings.Networks}}{{println .IPAddress}}{{end}}' container&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;code&gt;docker inspect -f '{{range .NetworkSettings.Networks}}{{println .IPAddress}}{{end}}'&lt;/code&gt; get IP&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;code&gt;upper&lt;/code&gt; : &lt;code&gt;docker inspect --format &amp;quot;{{upper .Name}}&amp;quot; container&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;title&lt;/code&gt; : &lt;code&gt;docker inspect --format &amp;quot;{{title .Name}}&amp;quot; container&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;split&lt;/code&gt; : &lt;code&gt;docker inspect --format '{{split .Image &amp;quot;:&amp;quot;}}'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lower&lt;/code&gt; : &lt;code&gt;docker inspect --format &amp;quot;{{lower .Name}}&amp;quot; container&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;json&lt;/code&gt; : &lt;code&gt;docker inspect --format '{{json .Mounts}}' container&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;join&lt;/code&gt; : &lt;code&gt;docker inspect --format '{{join .Args &amp;quot; , &amp;quot;}}' container&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Sample:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker inspect 7cb9995533cb &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s2"&gt;&amp;quot;IPAddress&amp;quot;&lt;/span&gt;

.Service.ID Service ID
.Service.Name       Service name
.Service.Labels     Service labels
.Node.ID    Node ID
.Node.Hostname      Node Hostname
.Task.ID    Task ID
.Task.Name  Task name
.Task.Slot  Task slot
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="commands-tags-save-and-export"&gt;
&lt;h2&gt;9. &lt;a class="toc-backref" href="#id10"&gt;Commands Tags, Save and Export&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;(Seems modern docker can remember the tag)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;code&gt;docker image save b5435fede523 -o ./plugins-scrcips.2.3.0.180428.tar&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker image load -i ./plugins-scrcips.2.3.0.180428.tar&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker image tag b5435fede523 plugins-scripts:2.3.0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker image rmi plugins-scripts:2.3.0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="commands-others"&gt;
&lt;h2&gt;10. &lt;a class="toc-backref" href="#id11"&gt;Commands Others&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;code&gt;docker system prune&lt;/code&gt; remove all images, containers, and networks.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker run --rm -it --security-opt apparmor=docker-default hello-world&lt;/code&gt; security policy&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker run  -v /root:/root -e DISPLAY=$DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix  -it node:6.14.0 /bin/bash&lt;/code&gt;  Display (For LibreOffice/Chrome/FF)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LABEL &amp;quot;com.example.vendor&amp;quot;=&amp;quot;ACME Incorporated&amp;quot;&lt;/code&gt; to add labels&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bin/registry garbage-collect [--dry-run] /path/to/config.yml&lt;/code&gt; garbage collection&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="reference"&gt;
&lt;h2&gt;11. &lt;a class="toc-backref" href="#id12"&gt;Reference&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.docker.com/get-started/"&gt;https://docs.docker.com/get-started/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Linux"></category><category term="CentOS7"></category><category term="Docker"></category></entry></feed>